/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Java1.2.jj */
/*@egen*//*
 *     Java1.2.jjt  Nov 28, 2001
 *
 *     Katsuhisa Maruyama (maru@fse.cs.ritsumei.ac.jp)
 *
 * This file is a modified version of the file "Java1.2-b.jjt" which
 * is originally found in the JavaGrammars Examples directory.
 *
 * ===================================================================
 *
 * Copyright (C) 1996, 1997 Sun Microsystems Inc.
 *
 * Use of this file and the system it is part of is constrained by the
 * file COPYRIGHT in the root directory of this system.  You may, however,
 * make any modifications you wish to this file.
 *
 */

options {
  // JavaCC options
  JAVA_UNICODE_ESCAPE = true;                                                                                            
  STATIC = true;                  
}

PARSER_BEGIN(JavaParser)

package jp.ac.ritsumei.cs.fse.jrt.parser;
import jp.ac.ritsumei.cs.fse.jrt.parser.ast.*;
import jp.ac.ritsumei.cs.fse.jrt.parser.summary.*;
import jp.ac.ritsumei.cs.fse.jrt.model.*;
import java.util.Stack;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.StringTokenizer;

public class JavaParser/*@bgen(jjtree)*/implements JavaParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTJavaParserState jjtree = new JJTJavaParserState();

/*@egen*/
    private static JavaFile jfile;
    private static JavaModelFactory factory;
    private static Stack classes = new Stack();     // JavaClass
    private static Stack methods = new Stack();     // JavaMethod
    private static Stack statements = new Stack();  // JavaStatement
    private static HashMap variableDecls = new HashMap();  // JavaVariable
    private static int variableID;

    public void run(JavaModelFactory factory, JavaFile jfile) throws ParseException {
        this.jfile = jfile;
        this.factory = factory;
        classes.clear();
        methods.clear();
        statements.clear();
        variableDecls.clear();
        variableID = 1;

        ASTCompilationUnit astNode = CompilationUnit();
        jfile.setASTNode(astNode);
    }

    private static void setVariableDeclaration(JavaVariable jvar) {
        if (!variableDecls.containsKey(jvar.getName())) {
            variableDecls.put(jvar.getName(), jvar);
        }
    }

    private static JavaVariable getVariableDeclaration(String name) {
        JavaVariable jvar = (JavaVariable)variableDecls.get(name);
        if (jvar != null) {
            return jvar;
        }

        JavaClass jclass = (JavaClass)classes.peek();
        jvar = (JavaVariable)variableDecls.get(jclass.getName() + "." + name);
        if (jvar != null) {
            return jvar;
        }

        return null;
    }

    private static void removeVariableDeclaration(JavaVariable jvar) {
        variableDecls.remove(jvar.getName());
    }

    private static void clearVariableDeclaration() {
        HashMap varDecls = new HashMap(variableDecls);        

        Iterator it = varDecls.keySet().iterator();
        while (it.hasNext()) {
            String name = (String)it.next();
            if (name.indexOf(".") == -1) {
                variableDecls.remove(name);
            }
        }
    }

    private static JavaVariable createJavaVariable(String className, String name, Token token) {
        JavaVariable jvar;
        SummaryJavaField sfield;
        JavaClass jclass = (JavaClass)classes.peek();
        
        JavaVariable jv = getVariableDeclaration(className + "." + name);
        if (jv != null) {
            jvar = new JavaVariable(className + "." + name, jv.getID(), token);
            jvar.setType(jv.getType());
            sfield = factory.getFieldTypeAt(jclass, name);
            jvar.setDeclField(sfield);
	    return jvar;
        }

        jvar = new JavaVariable(className + "." + name, variableID++, token);
        jv = getVariableDeclaration(className);
        if (jv != null && jv.getType() != null) {
            sfield = factory.getFieldType(jclass, jv.getType(), name);
        } else {
            sfield = factory.getFieldTypeAt(jclass, className, name);
        }

        if (sfield != null) {
            jvar.setType(sfield.getType());
            jvar.setDeclField(sfield);
        } else {
            jvar.setType(null);
        }
        return jvar;
    }

    private static void ignoreToken(String t) {
        // System.out.println("  ** Sorry, \"" + t + "\" is not supported.");
    }
}

PARSER_END(JavaParser)

// WHITE SPACE
SPECIAL_TOKEN :
{
    " "
  | "\t"
  | "\f"
  | "\r\n"
  | "\n"
  | "\r"
}

// COMMENTS
MORE :
{
    "//" : IN_SINGLE_LINE_COMMENT
  | <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
  | "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
    <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
    <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
    <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT, IN_FORMAL_COMMENT, IN_MULTI_LINE_COMMENT>
MORE :
{
    < ~[] >
}

// RESERVED WORDS AND LITERALS
TOKEN :
{
    < ABSTRACT: "abstract" >
  | < BOOLEAN: "boolean" >
  | < BREAK: "break" >
  | < BYTE: "byte" >
  | < CASE: "case" >
  | < CATCH: "catch" >
  | < CHAR: "char" >
  | < CLASS: "class" >
  | < CONST: "const" >
  | < CONTINUE: "continue" >
  | < _DEFAULT: "default" >
  | < DO: "do" >
  | < DOUBLE: "double" >
  | < ELSE: "else" >
  | < EXTENDS: "extends" >
  | < FALSE: "false" >
  | < FINAL: "final" >
  | < FINALLY: "finally" >
  | < FLOAT: "float" >
  | < FOR: "for" >
  | < GOTO: "goto" >
  | < IF: "if" >
  | < IMPLEMENTS: "implements" >
  | < IMPORT: "import" >
  | < INSTANCEOF: "instanceof" >
  | < INT: "int" >
  | < INTERFACE: "interface" >
  | < LONG: "long" >
  | < NATIVE: "native" >
  | < NEW: "new">
  | < NULL: "null" >
  | < PACKAGE: "package">
  | < PRIVATE: "private" >
  | < PROTECTED: "protected" >
  | < PUBLIC: "public" >
  | < RETURN: "return" >
  | < SHORT: "short" >
  | < STATIC: "static" >
  | < SUPER: "super" >
  | < SWITCH: "switch" >
  | < SYNCHRONIZED: "synchronized" >
  | < THIS: "this" >
  | < THROW: "throw" >
  | < THROWS: "throws" >
  | < TRANSIENT: "transient" >
  | < TRUE: "true" >
  | < TRY: "try" >
  | < VOID: "void" >
  | < VOLATILE: "volatile" >
  | < WHILE: "while" >
  | < STRICTFP: "strictfp" >
}

// LITERALS
TOKEN :
{
    < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
    >
  | < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
  | < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
  | < #OCTAL_LITERAL: "0" (["0"-"7"])* >
  | < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
    >
  | < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
  | < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
    >
  | < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
    >
}

// IDENTIFIERS
TOKEN :
{
    < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
  | < #LETTER:
      [
       "$",
       "A"-"Z",
       "_",
       "a"-"z",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
    >
  | < #DIGIT:
      [
       "0"-"9",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
    >
}

// SEPARATORS
TOKEN :
{
    < LPAREN: "(" >
  | < RPAREN: ")" >
  | < LBRACE: "{" >
  | < RBRACE: "}" >
  | < LBRACKET: "[" >
  | < RBRACKET: "]" >
  | < SEMICOLON: ";" >
  | < COMMA: "," >
  | < DOT: "." >
}

// OPERATORS
TOKEN :
{
    < ASSIGN: "=" >
  | < GT: ">" >
  | < LT: "<" >
  | < BANG: "!" >
  | < TILDE: "~" >
  | < HOOK: "?" >
  | < COLON: ":" >
  | < EQ: "==" >
  | < LE: "<=" >
  | < GE: ">=" >
  | < NE: "!=" >
  | < SC_OR: "||" >
  | < SC_AND: "&&" >
  | < INCR: "++" >
  | < DECR: "--" >
  | < PLUS: "+" >
  | < MINUS: "-" >
  | < STAR: "*" >
  | < SLASH: "/" >
  | < BIT_AND: "&" >
  | < BIT_OR: "|" >
  | < XOR: "^" >
  | < REM: "%" >
  | < LSHIFT: "<<" >
  | < RSIGNEDSHIFT: ">>" >
  | < RUNSIGNEDSHIFT: ">>>" >
  | < PLUSASSIGN: "+=" >
  | < MINUSASSIGN: "-=" >
  | < STARASSIGN: "*=" >
  | < SLASHASSIGN: "/=" >
  | < ANDASSIGN: "&=" >
  | < ORASSIGN: "|=" >
  | < XORASSIGN: "^=" >
  | < REMASSIGN: "%=" >
  | < LSHIFTASSIGN: "<<=" >
  | < RSIGNEDSHIFTASSIGN: ">>=" >
  | < RUNSIGNEDSHIFTASSIGN: ">>>=" >
}


/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

ASTCompilationUnit CompilationUnit() :
{/*@bgen(jjtree) CompilationUnit */
  ASTCompilationUnit jjtn000 = new ASTCompilationUnit(null, JJTCOMPILATIONUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CompilationUnit */
    try {
/*@egen*/
    [ PackageDeclaration() ] { jfile.addImportFiles("java.lang.*"); }
    ( ImportDeclaration() )*
    ( TypeDeclaration() )*
    <EOF>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void PackageDeclaration() :
{/*@bgen(jjtree) PackageDeclaration */
  ASTPackageDeclaration jjtn000 = new ASTPackageDeclaration(null, JJTPACKAGEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ String name; }
{/*@bgen(jjtree) PackageDeclaration */
    try {
/*@egen*/
    "package" name = Name() { jfile.setPackageName(name); } ";"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ImportDeclaration() :
{/*@bgen(jjtree) ImportDeclaration */
  ASTImportDeclaration jjtn000 = new ASTImportDeclaration(null, JJTIMPORTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ String name; }
{/*@bgen(jjtree) ImportDeclaration */
    try {
/*@egen*/
    "import" name = Name() [ "." "*" { name = name + ".*"; } ]
    { jfile.addImportFiles(name); } ";"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void TypeDeclaration() :
{/*@bgen(jjtree) TypeDeclaration */
  ASTTypeDeclaration jjtn000 = new ASTTypeDeclaration(null, JJTTYPEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TypeDeclaration */
      try {
/*@egen*/
      LOOKAHEAD( ( "abstract" | "final" | "public" | "strictfp" )* "class" )
      ClassDeclaration()
    | InterfaceDeclaration()
    | ";"/*@bgen(jjtree)*/
      } catch (Throwable jjte000) {
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          throw (RuntimeException)jjte000;
        }
        if (jjte000 instanceof ParseException) {
          throw (ParseException)jjte000;
        }
        throw (Error)jjte000;
      } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
      }
/*@egen*/
}

void ClassDeclaration() :
{/*@bgen(jjtree) ClassDeclaration */
  ASTClassDeclaration jjtn000 = new ASTClassDeclaration(null, JJTCLASSDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ JavaModifier modifier = new JavaModifier(); }
{/*@bgen(jjtree) ClassDeclaration */
    try {
/*@egen*/
    ( "abstract" { modifier.add("abstract"); }
    | "final"    { modifier.add("final"); }
    | "public"   { modifier.add("public"); }
    | "strictfp" { modifier.add("strictfp"); }
    )*
    UnmodifiedClassDeclaration(modifier)/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void UnmodifiedClassDeclaration(JavaModifier modifier) :
{/*@bgen(jjtree) UnmodifiedClassDeclaration */
  ASTUnmodifiedClassDeclaration jjtn000 = new ASTUnmodifiedClassDeclaration(null, JJTUNMODIFIEDCLASSDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ String name;
  JavaClass jclass;
}
{/*@bgen(jjtree) UnmodifiedClassDeclaration */
    try {
/*@egen*/
    "class" {
        variableDecls.clear();
    } <IDENTIFIER> {
	jjtn000.setResponsive(token);
        jclass = jjtn000.getJavaClass();
        name = token.image;
        if (!classes.empty()) {
            ignoreToken("nested class");
            JavaClass jc = (JavaClass)classes.peek();
            name = jc.getName() + "$" + name;
        }
        jclass.setName(name);
        jclass.setModifier(modifier);
        jclass.setInterface(false);
        jclass.setSummaryJavaClass(factory.getSummaryJavaClassInSelf(name));
        jclass.setJavaFile(jfile);
        jfile.addJavaClass(jclass);
        classes.push(jclass);
    }
    { name = "java.lang.Object"; }
    [ "extends" name = Name() ] {
        jclass.setSuperClassName(factory.getQualifiedName(name));
        jclass.addUsedType(factory.getQualifiedName(name));
        // factory.addRelatedFiles(jclass.getSuperClassName());
    }
    [ "implements" name = NameList() {
        jclass.setSuperClassNameList(factory.getQualifiedNameList(name));
        jclass.addUsedType(factory.getQualifiedNameList(name));
        // factory.addRelatedFiles(jclass.getSuperClassNameList());
    } ]
    ClassBody()/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ { classes.pop(); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ClassBody() :
{/*@bgen(jjtree) ClassBody */
  ASTClassBody jjtn000 = new ASTClassBody(null, JJTCLASSBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ClassBody */
    try {
/*@egen*/
    "{" ( ClassBodyDeclaration() )* "}"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void NestedClassDeclaration() :
{/*@bgen(jjtree) NestedClassDeclaration */
  ASTNestedClassDeclaration jjtn000 = new ASTNestedClassDeclaration(null, JJTNESTEDCLASSDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ JavaModifier modifier = new JavaModifier(); }
{/*@bgen(jjtree) NestedClassDeclaration */
    try {
/*@egen*/
    ( "static"    { modifier.add("static"); }
    | "abstract"  { modifier.add("abstract"); }
    | "final"     { modifier.add("final"); }
    | "public"    { modifier.add("public"); }
    | "protected" { modifier.add("protected"); }
    | "private"   { modifier.add("private"); }
    | "strictfp"  { modifier.add("strictfp"); }
    )*
    UnmodifiedClassDeclaration(modifier)/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ClassBodyDeclaration() :
{/*@bgen(jjtree) ClassBodyDeclaration */
  ASTClassBodyDeclaration jjtn000 = new ASTClassBodyDeclaration(null, JJTCLASSBODYDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ClassBodyDeclaration */
      try {
/*@egen*/
      LOOKAHEAD(2)
      Initializer()
    | LOOKAHEAD( ( "static" | "abstract" | "final" | "public"
        | "protected" | "private" | "strictfp")* "class" )
      NestedClassDeclaration()
    | LOOKAHEAD( ( "static" | "abstract" | "final" | "public"
        | "protected" | "private" | "strictfp")* "interface" )
      NestedInterfaceDeclaration()
    | LOOKAHEAD( [ "public" | "protected" | "private" ] Name() "(" )
      ConstructorDeclaration()
    | LOOKAHEAD( MethodDeclarationLookahead() )
      MethodDeclaration()
    | FieldDeclaration()/*@bgen(jjtree)*/
      } catch (Throwable jjte000) {
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          throw (RuntimeException)jjte000;
        }
        if (jjte000 instanceof ParseException) {
          throw (ParseException)jjte000;
        }
        throw (Error)jjte000;
      } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
      }
/*@egen*/
}

void MethodDeclarationLookahead() :
{/*@bgen(jjtree) MethodDeclarationLookahead */
  ASTMethodDeclarationLookahead jjtn000 = new ASTMethodDeclarationLookahead(null, JJTMETHODDECLARATIONLOOKAHEAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MethodDeclarationLookahead */
    try {
/*@egen*/
    ( "public" | "protected" | "private" | "static" | "abstract"
        | "final" | "native" | "synchronized" | "strictfp" )*
    ResultType() <IDENTIFIER> "("/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void InterfaceDeclaration() :
{/*@bgen(jjtree) InterfaceDeclaration */
  ASTInterfaceDeclaration jjtn000 = new ASTInterfaceDeclaration(null, JJTINTERFACEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ JavaModifier modifier = new JavaModifier(); }
{/*@bgen(jjtree) InterfaceDeclaration */
    try {
/*@egen*/
    ( "abstract" { modifier.add("abstract"); }
    | "public"   { modifier.add("public"); }
    | "strictfp" { modifier.add("strictfp"); }
    )*
    UnmodifiedInterfaceDeclaration(modifier)/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void NestedInterfaceDeclaration() :
{/*@bgen(jjtree) NestedInterfaceDeclaration */
  ASTNestedInterfaceDeclaration jjtn000 = new ASTNestedInterfaceDeclaration(null, JJTNESTEDINTERFACEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ JavaModifier modifier = new JavaModifier(); }
{/*@bgen(jjtree) NestedInterfaceDeclaration */
    try {
/*@egen*/
    ( "static"    { modifier.add("static"); }
    | "abstract"  { modifier.add("abstract"); }
    | "final"     { modifier.add("final"); }
    | "public"    { modifier.add("public"); }
    | "protected" { modifier.add("protected"); }
    | "private"   { modifier.add("private"); }
    | "strictfp"  { modifier.add("strictfp"); }
    )*
    UnmodifiedInterfaceDeclaration(modifier)/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void UnmodifiedInterfaceDeclaration(JavaModifier modifier) :
{/*@bgen(jjtree) UnmodifiedInterfaceDeclaration */
  ASTUnmodifiedInterfaceDeclaration jjtn000 = new ASTUnmodifiedInterfaceDeclaration(null, JJTUNMODIFIEDINTERFACEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ String name;
  JavaClass jclass;
}
{/*@bgen(jjtree) UnmodifiedInterfaceDeclaration */
    try {
/*@egen*/
    "interface" {
        variableDecls.clear();
    } <IDENTIFIER> {
	jjtn000.setResponsive(token);
        jclass = jjtn000.getJavaClass();
        name = token.image;
        if (!classes.empty()) {
            ignoreToken("nested interface");
            JavaClass jc = (JavaClass)classes.peek();
            name = jc.getName() + "$" + name;
        }
        jclass.setName(name);
        jclass.setModifier(modifier);
        jclass.setInterface(true);
        jclass.setSummaryJavaClass(factory.getSummaryJavaClassInSelf(name));
        jclass.setJavaFile(jfile);
        jfile.addJavaClass(jclass);
        classes.push(jclass);
    }
    [ "extends" name = NameList() {
        jclass.setSuperClassNameList(factory.getQualifiedNameList(name));
        jclass.addUsedType(factory.getQualifiedNameList(name));
        // factory.addRelatedFiles(jclass.getSuperClassNameList());
    } ]
    "{" ( InterfaceMemberDeclaration() )* "}"/*@bgen(jjtree)*/
                                              {
                                                jjtree.closeNodeScope(jjtn000, true);
                                                jjtc000 = false;
                                              }
/*@egen*/ { classes.pop(); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void InterfaceMemberDeclaration() :
{/*@bgen(jjtree) InterfaceMemberDeclaration */
  ASTInterfaceMemberDeclaration jjtn000 = new ASTInterfaceMemberDeclaration(null, JJTINTERFACEMEMBERDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) InterfaceMemberDeclaration */
      try {
/*@egen*/
      LOOKAHEAD( ( "static" | "abstract" | "final" | "public"
        |"protected" | "private" | "strictfp")* "class" )
      NestedClassDeclaration()
    | LOOKAHEAD( ( "static" | "abstract" | "final" | "public"
        | "protected" | "private" | "strictfp")* "interface" )
      NestedInterfaceDeclaration()
    | LOOKAHEAD( MethodDeclarationLookahead() )
      MethodDeclaration()
    | FieldDeclaration()/*@bgen(jjtree)*/
      } catch (Throwable jjte000) {
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          throw (RuntimeException)jjte000;
        }
        if (jjte000 instanceof ParseException) {
          throw (ParseException)jjte000;
        }
        throw (Error)jjte000;
      } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
      }
/*@egen*/
}

void FieldDeclaration() :
{/*@bgen(jjtree) FieldDeclaration */
  ASTFieldDeclaration jjtn000 = new ASTFieldDeclaration(null, JJTFIELDDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ JavaModifier modifier = new JavaModifier();
  String type;
}
{/*@bgen(jjtree) FieldDeclaration */
    try {
/*@egen*/
    ( "public"    { modifier.add("public"); }
    | "protected" { modifier.add("protected"); }
    | "private"   { modifier.add("private"); }
    | "static"    { modifier.add("static"); }
    | "final"     { modifier.add("final"); }
    | "transient" { modifier.add("transient"); }
    | "volatile"  { modifier.add("volatile"); }
    )*
    type = Type() VariableDeclarator(modifier, type)
    ( "," VariableDeclarator(modifier, type) )* ";"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void VariableDeclarator(JavaModifier modifier, String type) :
{/*@bgen(jjtree) VariableDeclarator */
  ASTVariableDeclarator jjtn000 = new ASTVariableDeclarator(null, JJTVARIABLEDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ JavaClass jclass;
  JavaMethod jmethod;
  JavaStatement jstatement;
  JavaVariable jvar;
  boolean assign = false;
}
{/*@bgen(jjtree) VariableDeclarator */
    try {
/*@egen*/
    jvar = VariableDeclaratorId(modifier, type) {
        jclass = (JavaClass)classes.peek();
        jstatement = jjtn000.getJavaStatement();
        jstatement.addDefVariable(jvar);
        jstatement.setDeclaration(true);
        if (jvar.isField()) {
            jclass.addJavaField(jstatement);
        }
        if (!methods.empty()) {
            jmethod = (JavaMethod)methods.peek();
            jmethod.addDeclaration(jstatement);
            jstatement.setJavaMethod(jmethod);
        }
        statements.push(jstatement);
    }
    [ "=" VariableInitializer() { jstatement.setDeclaration(false); } ]/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { statements.pop(); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

JavaVariable VariableDeclaratorId(JavaModifier modifier, String type) :
{/*@bgen(jjtree) VariableDeclaratorId */
  ASTVariableDeclaratorId jjtn000 = new ASTVariableDeclaratorId(null, JJTVARIABLEDECLARATORID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ String name;
  String array = "";
  JavaClass jclass;
  JavaMethod jmethod;
  JavaVariable jvar;
}
{/*@bgen(jjtree) VariableDeclaratorId */
    try {
/*@egen*/
    <IDENTIFIER> {
        name = token.image;
        jvar = new JavaVariable(name, variableID++, token);
        jvar.setResponsive(token.beginLine, token.beginColumn,
                           token.endLine, token.endColumn);
        jvar.setModifier(modifier);
        jclass = (JavaClass)classes.peek();
        jvar.setJavaClass(jclass);
        if (methods.empty()) {
            jvar.setName(jclass.getName() + "." + jvar.getName());
            jvar.setField();
        } else {
            jmethod = (JavaMethod)methods.peek();
            jvar.setJavaMethod(jmethod);
            jmethod.addJavaVariable(jvar);
            jvar.setLocal();
        }
        setVariableDeclaration(jvar);
    } ( "[" "]" { array = array + "[]"; } )*/*@bgen(jjtree)*/
                                             {
                                               jjtree.closeNodeScope(jjtn000, true);
                                               jjtc000 = false;
                                             }
/*@egen*/ {
        jvar.setType(type + array);
        return jvar;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void VariableInitializer() :
{/*@bgen(jjtree) VariableInitializer */
  ASTVariableInitializer jjtn000 = new ASTVariableInitializer(null, JJTVARIABLEINITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VariableInitializer */
      try {
/*@egen*/
      ArrayInitializer()
    | Expression()/*@bgen(jjtree)*/
      } catch (Throwable jjte000) {
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          throw (RuntimeException)jjte000;
        }
        if (jjte000 instanceof ParseException) {
          throw (ParseException)jjte000;
        }
        throw (Error)jjte000;
      } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
      }
/*@egen*/
}

void ArrayInitializer() :
{/*@bgen(jjtree) ArrayInitializer */
  ASTArrayInitializer jjtn000 = new ASTArrayInitializer(null, JJTARRAYINITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArrayInitializer */
    try {
/*@egen*/
    "{"
    [ VariableInitializer() ( LOOKAHEAD(2) "," VariableInitializer() )* ]
    [ "," ]
    "}"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void MethodDeclaration() :
{/*@bgen(jjtree) MethodDeclaration */
  ASTMethodDeclaration jjtn000 = new ASTMethodDeclaration(null, JJTMETHODDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ JavaModifier modifier = new JavaModifier();
  JavaVariable jvar;
  String name, type;
}
{/*@bgen(jjtree) MethodDeclaration */
    try {
/*@egen*/
    ( "public"       { modifier.add("public"); }
    | "protected"    { modifier.add("protected"); }
    | "private"      { modifier.add("private"); }
    | "static"       { modifier.add("static"); }
    | "abstract"     { modifier.add("abstract"); }
    | "final"        { modifier.add("final"); }
    | "native"       { modifier.add("native"); }
    | "synchronized" { modifier.add("synchronized"); }
    | "strictfp"     { modifier.add("strictfp"); }
    )*
    { clearVariableDeclaration(); }
    type = ResultType() jvar = MethodDeclarator(modifier, type) {
        if (!jvar.getType().equals("void")) {
            jjtn000.setFormalOut(jvar);        
        }
    }
    [ "throws" name = NameList() { ignoreToken("throws"); } ]
    ( Block() | ";" )/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ { methods.pop(); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

JavaVariable MethodDeclarator(JavaModifier modifier, String type) :
{/*@bgen(jjtree) MethodDeclarator */
  ASTMethodDeclarator jjtn000 = new ASTMethodDeclarator(null, JJTMETHODDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ String name;
  String array = "";
  JavaClass jclass;
  JavaMethod jmethod;
  JavaVariable jvar;
}
{/*@bgen(jjtree) MethodDeclarator */
    try {
/*@egen*/
    <IDENTIFIER> {
        jjtn000.setResponsive(token);
        name = token.image;
        jmethod = jjtn000.getJavaMethod();
        jmethod.setName(name);
        jmethod.setModifier(modifier);
        jmethod.setType(type);
        jclass = (JavaClass)classes.peek();
        jmethod.setJavaClass(jclass);
        jmethod.setConstructor(false);
        jclass.addJavaMethod(jmethod);

        jvar = new JavaVariable("$" + name, variableID++, token);
        jvar.setModifier(modifier);
        jvar.setFormal();
        jvar.setJavaClass(jclass);
        jvar.setJavaMethod(jmethod);
        setVariableDeclaration(jvar);
        methods.push(jmethod);
    }
    FormalParameters() ( "[" "]" { array = array + "[]"; } )*/*@bgen(jjtree)*/
                                                              {
                                                                jjtree.closeNodeScope(jjtn000, true);
                                                                jjtc000 = false;
                                                              }
/*@egen*/ {
        jvar.setType(type + array);
        return jvar;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void FormalParameters() :
{/*@bgen(jjtree) FormalParameters */
  ASTFormalParameters jjtn000 = new ASTFormalParameters(null, JJTFORMALPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FormalParameters */
    try {
/*@egen*/
    "(" [ FormalParameter() ( "," FormalParameter() )* ] ")"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void FormalParameter() :
{/*@bgen(jjtree) FormalParameter */
  ASTFormalParameter jjtn000 = new ASTFormalParameter(null, JJTFORMALPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ JavaModifier modifier = new JavaModifier();
  String name, type;
  JavaStatement jstatement;
  JavaVariable jvar;
}
{/*@bgen(jjtree) FormalParameter */
    try {
/*@egen*/
    [ "final" { modifier.add("final"); } ]
    type = Type() jvar = VariableDeclaratorId(modifier, type)/*@bgen(jjtree)*/
                                                              {
                                                                jjtree.closeNodeScope(jjtn000, true);
                                                                jjtc000 = false;
                                                              }
/*@egen*/ {
        jvar.setFormal();
        jstatement = jjtn000.getJavaStatement();
        jstatement.addDefVariable(jvar);
        jstatement.setJavaMethod((JavaMethod)methods.peek());
        jvar.getJavaMethod().addJavaVariable(jvar);
        jvar.getJavaMethod().addParameter(jstatement);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ConstructorDeclaration() :
{/*@bgen(jjtree) ConstructorDeclaration */
  ASTConstructorDeclaration jjtn000 = new ASTConstructorDeclaration(null, JJTCONSTRUCTORDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ JavaModifier modifier = new JavaModifier();
  JavaClass jclass;
  JavaMethod jmethod;
  JavaVariable jvar;
  String name;
}
{/*@bgen(jjtree) ConstructorDeclaration */
    try {
/*@egen*/
    [ "public"    { modifier.add("public"); }
    | "protected" { modifier.add("protected"); }
    | "private"   { modifier.add("private"); }
    ]
    { clearVariableDeclaration(); }
    <IDENTIFIER> {
        jjtn000.setResponsive(token);
        name = token.image;
        jmethod = jjtn000.getJavaMethod();
        jmethod.setName(name);
        jmethod.setModifier(modifier);
        jclass = (JavaClass)classes.peek();
        jmethod.setType(jclass.getName());
        jmethod.setJavaClass(jclass);
        jmethod.setConstructor(true);
        jclass.addJavaMethod(jmethod);
        methods.push(jmethod);
    }
    FormalParameters()
    [ "throws" name = NameList() { ignoreToken("throws"); } ]
    "{"
    [ LOOKAHEAD( ExplicitConstructorInvocation() )
      ExplicitConstructorInvocation()
    ]
    ( BlockStatement() )*
    "}"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ { methods.pop(); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ExplicitConstructorInvocation() :
{/*@bgen(jjtree) ExplicitConstructorInvocation */
  ASTExplicitConstructorInvocation jjtn000 = new ASTExplicitConstructorInvocation(null, JJTEXPLICITCONSTRUCTORINVOCATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ JavaStatement jstatement;
  JavaClass jclass;
  JavaVariable jvar;
  String name = "";
}
{/*@bgen(jjtree) ExplicitConstructorInvocation */
    try {
/*@egen*/
    { jstatement = new JavaStatement();
      jstatement.setJavaMethod((JavaMethod)methods.peek());
      statements.push(jstatement);
    }
    ( LOOKAHEAD( "this" Arguments(null) ";" )
      "this" {
	  jclass = (JavaClass)classes.peek();
          name = jclass.getName() + "." + jclass.getName();
          jvar = new JavaVariable(name, 0);
          jvar.setType(jclass.getName());
          jvar.setJavaClass(jclass);
          jstatement.addUseVariable(jvar);
      }
      Arguments(name + "{}") ";"
    | [ LOOKAHEAD(2) name = PrimaryExpression() "." {
          name = name + ".";
          ignoreToken(name + "super");
      } ]
      "super" {
          jclass = (JavaClass)classes.peek();
          name = jclass.getShortSuperClassName() + "." + jclass.getShortSuperClassName();
          jvar = new JavaVariable(name, 0);
          jvar.setType(jclass.getShortSuperClassName());
          jvar.setJavaClass(jclass);
          jstatement.addUseVariable(jvar);
      }
      Arguments(name + "{}") ";"
    )/*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
      }
/*@egen*/ { statements.pop(); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Initializer() :
{/*@bgen(jjtree) Initializer */
  ASTInitializer jjtn000 = new ASTInitializer(null, JJTINITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Initializer */
    try {
/*@egen*/
    [ "static" ] Block()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String Type() :
{/*@bgen(jjtree) Type */
  ASTType jjtn000 = new ASTType(null, JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ String type;
  String array = "";
  JavaClass jclass;
}
{/*@bgen(jjtree) Type */
    try {
/*@egen*/
    ( type = PrimitiveType() | type = Name() )
    ( "[" "]" { array = array + "[]"; } )*/*@bgen(jjtree)*/
                                           {
                                             jjtree.closeNodeScope(jjtn000, true);
                                             jjtc000 = false;
                                           }
/*@egen*/ {
        if (type.charAt(0) != '!') {
            jclass = (JavaClass)classes.peek();
            jclass.addUsedType(factory.getQualifiedName(type));
            // factory.addRelatedFiles(factory.getQualifiedName(type));
        }
        return type + array;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String PrimitiveType() :
{/*@bgen(jjtree) PrimitiveType */
  ASTPrimitiveType jjtn000 = new ASTPrimitiveType(null, JJTPRIMITIVETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PrimitiveType */
      try {
/*@egen*/
      "boolean"/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ { return "!boolean"; }
    | "char"/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/    { return "!char"; }
    | "byte"/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/    { return "!byte"; }
    | "short"/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/   { return "!short"; }
    | "int"/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/     { return "!int"; }
    | "long"/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/    { return "!long"; }
    | "float"/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/   { return "!float"; }
    | "double"/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/  { return "!double"; }/*@bgen(jjtree)*/
      } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
      }
/*@egen*/
}

String ResultType() :
{/*@bgen(jjtree) ResultType */
  ASTResultType jjtn000 = new ASTResultType(null, JJTRESULTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ String type; }
{/*@bgen(jjtree) ResultType */
      try {
/*@egen*/
      "void"/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ { return "void"; }
    | type = Type()/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ { return type; }/*@bgen(jjtree)*/
      } catch (Throwable jjte000) {
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          throw (RuntimeException)jjte000;
        }
        if (jjte000 instanceof ParseException) {
          throw (ParseException)jjte000;
        }
        throw (Error)jjte000;
      } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
      }
/*@egen*/
}

String Name() :
{/*@bgen(jjtree) Name */
  ASTName jjtn000 = new ASTName(null, JJTNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ String name; }
{/*@bgen(jjtree) Name */
    try {
/*@egen*/
    <IDENTIFIER> { name = token.image; }
    ( LOOKAHEAD(2) "." <IDENTIFIER> { name = name + "." + token.image; } )*/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return name; }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String NameList() :
{/*@bgen(jjtree) NameList */
  ASTNameList jjtn000 = new ASTNameList(null, JJTNAMELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ String name, nameList; }
{/*@bgen(jjtree) NameList */
    try {
/*@egen*/
    nameList = Name() ( "," name = Name() { nameList = nameList + "," + name; } )*/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return nameList; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String Expression() :
{/*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(null, JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ String exp;
  JavaStatement jstatement, jst;
  JavaVariable jvar;
  String name;
}
{/*@bgen(jjtree) Expression */
    try {
/*@egen*/
    exp = ConditionalExpression()
    [ AssignmentOperator() {
        jst = (JavaStatement)statements.peek();
        jvar = jst.getUseVariables().getLast();

        jstatement = jjtn000.getJavaStatement();
        jstatement.addDefVariable(jvar);
        if (!methods.empty()) {
            jstatement.setJavaMethod((JavaMethod)methods.peek());
        }
        statements.push(jstatement);
    } name = Expression() { statements.pop(); } ]/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return exp; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

boolean AssignmentOperator() :
{/*@bgen(jjtree) AssignmentOperator */
  ASTAssignmentOperator jjtn000 = new ASTAssignmentOperator(null, JJTASSIGNMENTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AssignmentOperator */
      try {
/*@egen*/
      "="/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/    { return false; }
    | "*="/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/   { return true; }
    | "/="/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/   { return true; }
    | "%="/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/   { return true; }
    | "+="/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/   { return true; }
    | "-="/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/   { return true; }
    | "<<="/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/  { return true; }
    | ">>="/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/  { return true; }
    | ">>>="/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ { return true; }
    | "&="/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/   { return true; }
    | "^="/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/   { return true; }
    | "|="/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/   { return true; }/*@bgen(jjtree)*/
      } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
      }
/*@egen*/
}

String ConditionalExpression() :
{/*@bgen(jjtree) ConditionalExpression */
  ASTConditionalExpression jjtn000 = new ASTConditionalExpression(null, JJTCONDITIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ String exp; }
{/*@bgen(jjtree) ConditionalExpression */
    try {
/*@egen*/
    exp = ConditionalOrExpression()
    [ "?" Expression() ":" ConditionalExpression() {
        ignoreToken("?:");
    } ]/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return exp; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String ConditionalOrExpression() :
{/*@bgen(jjtree) ConditionalOrExpression */
  ASTConditionalOrExpression jjtn000 = new ASTConditionalOrExpression(null, JJTCONDITIONALOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ String exp;}
{/*@bgen(jjtree) ConditionalOrExpression */
    try {
/*@egen*/
    exp = ConditionalAndExpression()
    ( "||" ConditionalAndExpression() )*/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return exp; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String ConditionalAndExpression() :
{/*@bgen(jjtree) ConditionalAndExpression */
  ASTConditionalAndExpression jjtn000 = new ASTConditionalAndExpression(null, JJTCONDITIONALANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ String exp; }
{/*@bgen(jjtree) ConditionalAndExpression */
    try {
/*@egen*/
    exp = InclusiveOrExpression()
    ( "&&" InclusiveOrExpression() )*/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return exp; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String InclusiveOrExpression() :
{/*@bgen(jjtree) InclusiveOrExpression */
  ASTInclusiveOrExpression jjtn000 = new ASTInclusiveOrExpression(null, JJTINCLUSIVEOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ String exp; }
{/*@bgen(jjtree) InclusiveOrExpression */
    try {
/*@egen*/
    exp = ExclusiveOrExpression()
    ( "|" ExclusiveOrExpression() )*/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return exp; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String ExclusiveOrExpression() :
{/*@bgen(jjtree) ExclusiveOrExpression */
  ASTExclusiveOrExpression jjtn000 = new ASTExclusiveOrExpression(null, JJTEXCLUSIVEOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ String exp; }
{/*@bgen(jjtree) ExclusiveOrExpression */
    try {
/*@egen*/
    exp = AndExpression()
    ( "^" AndExpression() )*/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return exp; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String AndExpression() :
{/*@bgen(jjtree) AndExpression */
  ASTAndExpression jjtn000 = new ASTAndExpression(null, JJTANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ String exp; }
{/*@bgen(jjtree) AndExpression */
    try {
/*@egen*/
    exp = EqualityExpression()
    ( "&" EqualityExpression() )*/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return exp; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String EqualityExpression() :
{/*@bgen(jjtree) EqualityExpression */
  ASTEqualityExpression jjtn000 = new ASTEqualityExpression(null, JJTEQUALITYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ String exp; }
{/*@bgen(jjtree) EqualityExpression */
    try {
/*@egen*/
    exp = InstanceOfExpression()
    ( ( "==" | "!=" ) InstanceOfExpression() )*/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return exp; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String InstanceOfExpression() :
{/*@bgen(jjtree) InstanceOfExpression */
  ASTInstanceOfExpression jjtn000 = new ASTInstanceOfExpression(null, JJTINSTANCEOFEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ String exp; }
{/*@bgen(jjtree) InstanceOfExpression */
    try {
/*@egen*/
    exp = RelationalExpression()
    [ "instanceof" Type() ]/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return exp; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String RelationalExpression() :
{/*@bgen(jjtree) RelationalExpression */
  ASTRelationalExpression jjtn000 = new ASTRelationalExpression(null, JJTRELATIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ String exp; }
{/*@bgen(jjtree) RelationalExpression */
    try {
/*@egen*/
    exp = ShiftExpression()
    ( ( "<" | ">" | "<=" | ">=" ) ShiftExpression() )*/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return exp; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String ShiftExpression() :
{/*@bgen(jjtree) ShiftExpression */
  ASTShiftExpression jjtn000 = new ASTShiftExpression(null, JJTSHIFTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ String exp; }
{/*@bgen(jjtree) ShiftExpression */
    try {
/*@egen*/
    exp = AdditiveExpression()
    ( ( "<<" | ">>" | ">>>" ) AdditiveExpression() )*/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return exp; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String AdditiveExpression() :
{/*@bgen(jjtree) AdditiveExpression */
  ASTAdditiveExpression jjtn000 = new ASTAdditiveExpression(null, JJTADDITIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ String exp; }
{/*@bgen(jjtree) AdditiveExpression */
    try {
/*@egen*/
    exp = MultiplicativeExpression()
    ( ( "+" | "-" ) MultiplicativeExpression() )*/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return exp; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String MultiplicativeExpression() :
{/*@bgen(jjtree) MultiplicativeExpression */
  ASTMultiplicativeExpression jjtn000 = new ASTMultiplicativeExpression(null, JJTMULTIPLICATIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ String exp; }
{/*@bgen(jjtree) MultiplicativeExpression */
    try {
/*@egen*/
    exp = UnaryExpression()
    ( ( "*" | "/" | "%" ) UnaryExpression() )*/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return exp; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String UnaryExpression() :
{/*@bgen(jjtree) UnaryExpression */
  ASTUnaryExpression jjtn000 = new ASTUnaryExpression(null, JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ String exp; }
{/*@bgen(jjtree) UnaryExpression */
      try {
/*@egen*/
      ( "+" | "-" ) UnaryExpression()/*@bgen(jjtree)*/
                                      {
                                        jjtree.closeNodeScope(jjtn000, true);
                                        jjtc000 = false;
                                      }
/*@egen*/ { return ""; }
    | PreIncrementExpression()/*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                               }
/*@egen*/ { return ""; }
    | PreDecrementExpression()/*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                               }
/*@egen*/ { return ""; }
    | exp = UnaryExpressionNotPlusMinus()/*@bgen(jjtree)*/
                                          {
                                            jjtree.closeNodeScope(jjtn000, true);
                                            jjtc000 = false;
                                          }
/*@egen*/ { return exp; }/*@bgen(jjtree)*/
      } catch (Throwable jjte000) {
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          throw (RuntimeException)jjte000;
        }
        if (jjte000 instanceof ParseException) {
          throw (ParseException)jjte000;
        }
        throw (Error)jjte000;
      } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
      }
/*@egen*/
}

void PreIncrementExpression() :
{/*@bgen(jjtree) PreIncrementExpression */
  ASTPreIncrementExpression jjtn000 = new ASTPreIncrementExpression(null, JJTPREINCREMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ JavaStatement jstatement, jst;
  JavaVariable jvar;
}
{/*@bgen(jjtree) PreIncrementExpression */
    try {
/*@egen*/
    "++" {
        jstatement = jjtn000.getJavaStatement();
        statements.push(jstatement);
    }
    PrimaryExpression()/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {
        statements.pop();
        jvar = jstatement.getUseVariables().getFirst();
        jstatement.addDefVariable(new JavaVariable(jvar));
        if (!methods.empty()) {
            jstatement.setJavaMethod((JavaMethod)methods.peek());
        }
        jst = (JavaStatement)statements.peek();
        jst.addUseVariables(jstatement.getUseVariables());
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void PreDecrementExpression() :
{/*@bgen(jjtree) PreDecrementExpression */
  ASTPreDecrementExpression jjtn000 = new ASTPreDecrementExpression(null, JJTPREDECREMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ JavaStatement jstatement, jst;
  JavaVariable jvar;
}
{/*@bgen(jjtree) PreDecrementExpression */
    try {
/*@egen*/
    "--" {
        jstatement = jjtn000.getJavaStatement();
        statements.push(jstatement);
    }
    PrimaryExpression()/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ { 
        statements.pop();
        jvar = jstatement.getUseVariables().getFirst();
        jstatement.addDefVariable(jvar);
        if (!methods.empty()) {
            jstatement.setJavaMethod((JavaMethod)methods.peek());
        }        
        jst = (JavaStatement)statements.peek();
        jst.addUseVariables(jstatement.getUseVariables());
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String UnaryExpressionNotPlusMinus() :
{/*@bgen(jjtree) UnaryExpressionNotPlusMinus */
  ASTUnaryExpressionNotPlusMinus jjtn000 = new ASTUnaryExpressionNotPlusMinus(null, JJTUNARYEXPRESSIONNOTPLUSMINUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ String exp; }
{/*@bgen(jjtree) UnaryExpressionNotPlusMinus */
      try {
/*@egen*/
      ( "~" | "!" ) UnaryExpression()/*@bgen(jjtree)*/
                                      {
                                        jjtree.closeNodeScope(jjtn000, true);
                                        jjtc000 = false;
                                      }
/*@egen*/ { return ""; }
    | LOOKAHEAD( CastLookahead() ) exp = CastExpression()/*@bgen(jjtree)*/
                                                          {
                                                            jjtree.closeNodeScope(jjtn000, true);
                                                            jjtc000 = false;
                                                          }
/*@egen*/ { return exp; }
    | exp = PostfixExpression()/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/ { return exp; }/*@bgen(jjtree)*/
      } catch (Throwable jjte000) {
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          throw (RuntimeException)jjte000;
        }
        if (jjte000 instanceof ParseException) {
          throw (ParseException)jjte000;
        }
        throw (Error)jjte000;
      } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
      }
/*@egen*/
}

void CastLookahead() :
{/*@bgen(jjtree) CastLookahead */
  ASTCastLookahead jjtn000 = new ASTCastLookahead(null, JJTCASTLOOKAHEAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CastLookahead */
      try {
/*@egen*/
      LOOKAHEAD(2) "(" PrimitiveType()
    | LOOKAHEAD("(" Name() "[") "(" Name() "[" "]"
    | "(" Name() ")" ( "~" | "!" | "(" | <IDENTIFIER> | "this" | "super" | "new" | Literal() )/*@bgen(jjtree)*/
      } catch (Throwable jjte000) {
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          throw (RuntimeException)jjte000;
        }
        if (jjte000 instanceof ParseException) {
          throw (ParseException)jjte000;
        }
        throw (Error)jjte000;
      } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
      }
/*@egen*/
}

String PostfixExpression() :
{/*@bgen(jjtree) PostfixExpression */
  ASTPostfixExpression jjtn000 = new ASTPostfixExpression(null, JJTPOSTFIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ String exp;
  JavaStatement jstatement, jst;
  JavaVariable jvar;
}
{/*@bgen(jjtree) PostfixExpression */
    try {
/*@egen*/
    exp = PrimaryExpression()
    [ ( "++" | "--" ) {
        jst = (JavaStatement)statements.peek();
        jvar = jst.getUseVariables().getLast();

        jstatement = jjtn000.getJavaStatement();
        jstatement.addDefVariable(jvar);
        jstatement.addUseVariables(jst.getUseVariables());
        if (!methods.empty()) {
            jstatement.setJavaMethod((JavaMethod)methods.peek());
        }
    } ]/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return exp; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String CastExpression() :
{/*@bgen(jjtree) CastExpression */
  ASTCastExpression jjtn000 = new ASTCastExpression(null, JJTCASTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ JavaStatement jstatement;
  JavaVariable jvar;
  String type;
  String exp;
  int size;
}
{/*@bgen(jjtree) CastExpression */
    try {
/*@egen*/
    ( LOOKAHEAD( "(" PrimitiveType() )
      "(" type = Type() ")" exp = UnaryExpression()
    | "(" type = Type() ")" exp = UnaryExpressionNotPlusMinus() )/*@bgen(jjtree)*/
                                                                  {
                                                                    jjtree.closeNodeScope(jjtn000, true);
                                                                    jjtc000 = false;
                                                                  }
/*@egen*/ {
        jstatement = (JavaStatement)statements.peek();
        jvar = jstatement.getUseVariables().getLast();
        jvar.setType(type);
        return exp;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String PrimaryExpression() :
{/*@bgen(jjtree) PrimaryExpression */
  ASTPrimaryExpression jjtn000 = new ASTPrimaryExpression(null, JJTPRIMARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ JavaStatement jstatement, pjstatement;
  SimpleNode node;
  String name;
}
{/*@bgen(jjtree) PrimaryExpression */
    try {
/*@egen*/
    { jstatement = jjtn000.getJavaStatement();
      if (!methods.empty()) {
          jstatement.setJavaMethod((JavaMethod)methods.peek());
      }
      statements.push(jstatement);
    }
    node = PrimaryPrefix() { name = node.getName(); }
    ( LOOKAHEAD(2) node = PrimarySuffix(node, name) {
        name = name + node.getName();
    } )*/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { statements.pop();
      pjstatement = (JavaStatement)statements.peek();
      pjstatement.addUseVariables(jstatement.getUseVariables());
      pjstatement.addDefVariables(jstatement.getDefVariables());
      return name;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

ASTPrimaryPrefix PrimaryPrefix() :
{/*@bgen(jjtree) PrimaryPrefix */
  ASTPrimaryPrefix jjtn000 = new ASTPrimaryPrefix(null, JJTPRIMARYPREFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ String name;
  Token tmpToken;
  JavaClass jclass;
  JavaMethod jmethod;
  JavaVariable jvar;
  JavaStatement jstatement;
  SummaryJavaField sfield;
}
{/*@bgen(jjtree) PrimaryPrefix */
      try {
/*@egen*/
      jvar = Literal()/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ {
          jclass = (JavaClass)classes.peek();
          jvar.setJavaClass(jclass);
          jstatement = (JavaStatement)statements.peek();
          jstatement.addUseVariable(jvar);
          jjtn000.setName("LITERAL");
          return jjtn000;
      }
    | "this"/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/    {
	  jclass = (JavaClass)classes.peek();
          jjtn000.setName(jclass.getName());
          return jjtn000;
      }
    | "super" { tmpToken = token; } "." <IDENTIFIER>/*@bgen(jjtree)*/
                                                     {
                                                       jjtree.closeNodeScope(jjtn000, true);
                                                       jjtc000 = false;
                                                     }
/*@egen*/ {
          name = token.image;
          jclass = (JavaClass)classes.peek(); 
          String superclassName = jclass.getShortSuperClassName();
          jvar = new JavaVariable(superclassName + "." + name, variableID++, tmpToken);
          sfield = factory.getFieldTypeAt(jclass, superclassName, name);
          if (sfield != null) {
              jvar.setType(sfield.getType());
              jvar.setDeclField(sfield);
          } else {
              jvar.setType(null);
          }

          jvar.setJavaClass(jclass);
          jvar.setResponsive(token.beginLine, token.beginColumn,
                             token.endLine, token.endColumn);
          if (!methods.empty()) {
              jmethod = (JavaMethod)methods.peek();
              jvar.setJavaMethod(jmethod);
              jmethod.addJavaVariable(jvar);
          }

          jstatement = (JavaStatement)statements.peek();
          if (jvar.getType() != null) {
              setVariableDeclaration(jvar);
          }
          jstatement.addUseVariable(jvar);
          jjtn000.setName(superclassName + "." + name);
          return jjtn000;
      }
    | "(" name = Expression() ")"/*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                    }
/*@egen*/   {
          jjtn000.setName(name);
          return jjtn000;
      }
    | AllocationExpression()/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/ {
          jjtn000.setName("ALLOCATION");
          return jjtn000;
      }
    | LOOKAHEAD( ResultType() "." "class" )
      name = ResultType() "." "class"/*@bgen(jjtree)*/
                                      {
                                        jjtree.closeNodeScope(jjtn000, true);
                                        jjtc000 = false;
                                      }
/*@egen*/ {
          jjtn000.setName(name);
          return jjtn000;
      }
    | name = ResponsiveName()/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/ {
          jjtn000.setName(name);
          return jjtn000;
      }/*@bgen(jjtree)*/
      } catch (Throwable jjte000) {
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          throw (RuntimeException)jjte000;
        }
        if (jjte000 instanceof ParseException) {
          throw (ParseException)jjte000;
        }
        throw (Error)jjte000;
      } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
      }
/*@egen*/
}

ASTPrimarySuffix PrimarySuffix(SimpleNode prev, String prefix) :
{/*@bgen(jjtree) PrimarySuffix */
  ASTPrimarySuffix jjtn000 = new ASTPrimarySuffix(null, JJTPRIMARYSUFFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ String name;
  JavaClass jclass;
  JavaMethod jmethod;
  JavaVariable jvar;
  JavaStatement jstatement;
  SummaryJavaField sfield;
}
{/*@bgen(jjtree) PrimarySuffix */
      try {
/*@egen*/
      LOOKAHEAD(2) "." "this"/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/ {
          ignoreToken(".this suffix");
          jjtn000.setName(".this");
          return jjtn000;
      }
    | LOOKAHEAD(2) "." AllocationExpression()/*@bgen(jjtree)*/
                                              {
                                                jjtree.closeNodeScope(jjtn000, true);
                                                jjtc000 = false;
                                              }
/*@egen*/ {
          ignoreToken(".new suffix");
          jjtn000.setName(".ALLOCATION");
          return jjtn000;
      }
    | "[" name = Expression() "]"/*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                  }
/*@egen*/ {
          jjtn000.setName("[]");
          return jjtn000;
      }
    | "." <IDENTIFIER>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ {
          jclass = (JavaClass)classes.peek();
          jvar = createJavaVariable(prefix, token.image, token);
          jvar.setJavaClass(jclass);
          jvar.setResponsive(token.beginLine, token.beginColumn,
                             token.endLine, token.endColumn);
          if (!methods.empty()) {
              jmethod = (JavaMethod)methods.peek();
              jvar.setJavaMethod(jmethod);
              jmethod.addJavaVariable(jvar);
          }

          jstatement = (JavaStatement)statements.peek();
          if (jstatement.getUseVariables().size() != 0) {
              JavaVariable jv = jstatement.getUseVariables().getLast();
              if (jv.getType() == null) {
                  jstatement.getUseVariables().removeLast();
              }
          }
          jstatement.addUseVariable(jvar);
          if (jvar.getType() != null) {
              setVariableDeclaration(jvar);
          }
          jvar.setASTNode(jjtn000);
          jjtn000.setName("." + token.image);
          return jjtn000;
      }
    | Arguments(prefix + "{}")/*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                               }
/*@egen*/ {
          jjtn000.setName("{}");
          return jjtn000;
      }/*@bgen(jjtree)*/
      } catch (Throwable jjte000) {
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          throw (RuntimeException)jjte000;
        }
        if (jjte000 instanceof ParseException) {
          throw (ParseException)jjte000;
        }
        throw (Error)jjte000;
      } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
      }
/*@egen*/
}

String ResponsiveName() :
{/*@bgen(jjtree) ResponsiveName */
  ASTResponsiveName jjtn000 = new ASTResponsiveName(null, JJTRESPONSIVENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ String name;
  JavaClass jclass;
  SummaryJavaField sfield;
  JavaMethod jmethod;
  JavaStatement jstatement;  
  JavaVariable jvar, jv;
}
{/*@bgen(jjtree) ResponsiveName */
    try {
/*@egen*/
    <IDENTIFIER> {
        name = token.image;
        jclass = (JavaClass)classes.peek();
        jv = getVariableDeclaration(name);
        if (jv != null) {
            jvar = new JavaVariable(name, jv.getID(), token);
            if (jv.isField()) {
                jvar.setName(jclass.getName() + "." + name);
                sfield = factory.getFieldTypeAt(jclass, name);
                jvar.setDeclField(sfield);
            }
            jvar.setType(jv.getType());

        } else {
            jvar = new JavaVariable(name, variableID++, token);
            sfield = factory.getFieldType(jclass, name);
	    if (sfield != null) {
                jvar.setName(name);
                jvar.setType(sfield.getType());
                jvar.setDeclField(sfield);
            } else {
                jvar.setType(null);
            }
        }

        jvar.setJavaClass(jclass);
        jvar.setResponsive(token.beginLine, token.beginColumn,
                           token.endLine, token.endColumn);
        if (!methods.empty()) {
            jmethod = (JavaMethod)methods.peek();
            jvar.setJavaMethod(jmethod);
            jmethod.addJavaVariable(jvar);
        }

        jstatement = (JavaStatement)statements.peek();
        jstatement.addUseVariable(jvar);
        if (jvar.getType() != null) {
            setVariableDeclaration(jvar);
        }
    }
    ( LOOKAHEAD(2) "." <IDENTIFIER> {
        jvar = createJavaVariable(name, token.image, token);
        name = name + "." + token.image;
        jvar.setJavaClass(jclass);
        jvar.setResponsive(token.beginLine, token.beginColumn,
                           token.endLine, token.endColumn);
        if (!methods.empty()) {
            jmethod = (JavaMethod)methods.peek();
            jvar.setJavaMethod(jmethod);
            jmethod.addJavaVariable(jvar);
        }

        jstatement = (JavaStatement)statements.peek();
        jv = jstatement.getUseVariables().getLast();
        if (jv.getType() == null) {
            jstatement.getUseVariables().removeLast();
            removeVariableDeclaration(jv);
        }
        jstatement.addUseVariable(jvar);
        if (jvar.getType() != null) {
            setVariableDeclaration(jvar);
        }
    } )*/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/ { return name; }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

JavaVariable Literal() :
{/*@bgen(jjtree) Literal */
  ASTLiteral jjtn000 = new ASTLiteral(null, JJTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ JavaVariable jvar; }
{/*@bgen(jjtree) Literal */
    try {
/*@egen*/
    { jvar = new JavaVariable("LITERAL", -1); }
    ( <INTEGER_LITERAL>        { jvar.setType("!int"); }
    | <FLOATING_POINT_LITERAL> { jvar.setType("!float"); }
    | <CHARACTER_LITERAL>      { jvar.setType("!char"); }
    | <STRING_LITERAL>         { jvar.setType("java.lang.String"); }
    | BooleanLiteral()         { jvar.setType("!boolean"); }
    | NullLiteral()            { jvar.setType("null"); }
    )/*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
      }
/*@egen*/ { return jvar; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void BooleanLiteral() :
{/*@bgen(jjtree) BooleanLiteral */
  ASTBooleanLiteral jjtn000 = new ASTBooleanLiteral(null, JJTBOOLEANLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BooleanLiteral */
      try {
/*@egen*/
      "true"
    | "false"/*@bgen(jjtree)*/
      } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
      }
/*@egen*/
}

void NullLiteral() :
{/*@bgen(jjtree) NullLiteral */
  ASTNullLiteral jjtn000 = new ASTNullLiteral(null, JJTNULLLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NullLiteral */
    try {
/*@egen*/
    "null"/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Arguments(String name) :
{/*@bgen(jjtree) Arguments */
  ASTArguments jjtn000 = new ASTArguments(null, JJTARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ JavaStatement jstatement, pjstatement;
  JavaClass jclass;
  JavaMethod jmethod;
  JavaVariable jvar, jv;
  SummaryJavaMethod smethod;
}
{/*@bgen(jjtree) Arguments */
    try {
/*@egen*/
    "(" {
        jstatement = jjtn000.getJavaStatement();
        pjstatement = (JavaStatement)statements.peek();
        jvar = pjstatement.getUseVariables().getLast();
        jvar.setName(name);
        jvar.setID(variableID++);
        jvar.setActual();
    }
    [ ArgumentList(jjtn000, jvar) ] ")"/*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
                                        }
/*@egen*/ {
        jclass = (JavaClass)classes.peek();
        ArrayList params = jjtn000.getArguments();
        int sep = name.lastIndexOf('.');
        if (sep == -1) {
            smethod = factory.getMethodType(jclass, name, params);
            if (smethod != null) {
                jvar.setType(smethod.getType());
                jjtn000.setCalledMethod(smethod);
                if (!methods.empty()) {
                    jmethod = (JavaMethod)methods.peek();
                    jmethod.addCalledMethod(smethod);
                }
            } else {
                jvar.setType(null);
            }

        } else {
            String cname = name.substring(0, sep);
            String mname = name.substring(sep + 1);

            jv = getVariableDeclaration(cname);
            if (jv != null && jv.getType() != null) {
                smethod = factory.getMethodType(jclass, jv.getType(), mname, params);
                pjstatement.getUseVariables().remove(jv); 
                jstatement.addUseVariable(jv);
            } else {
                smethod = factory.getMethodTypeAt(jclass, cname, mname, params);
            }
            if (smethod != null) {
                jvar.setType(smethod.getType());
                jjtn000.setCalledMethod(smethod);
                if (!methods.empty()) {
                    jmethod = (JavaMethod)methods.peek();
                    jmethod.addCalledMethod(smethod);
                }
            } else {
                jvar.setType(null);
            }
        } 

        jstatement.addDefVariable(jvar);
        jstatement.addUseVariables(jjtn000.getArgumentList());
        if (!methods.empty()) {
            jstatement.setJavaMethod((JavaMethod)methods.peek());
        }
        if (jvar.getType() != null) {
            setVariableDeclaration(jvar);
        }
        jjtn000.setName(name);
        if (jvar.getType() != null && !jvar.getType().equals("void")) {
            jjtn000.setActualOut(jvar);
        }
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ArgumentList(ASTArguments node, JavaVariable actualOut) :
{/*@bgen(jjtree) ArgumentList */
  ASTArgumentList jjtn000 = new ASTArgumentList(null, JJTARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ JavaStatement jstatement;
  JavaVariable jvar;
  String type;
}
{/*@bgen(jjtree) ArgumentList */
    try {
/*@egen*/
    { jstatement = new JavaStatement();
      statements.push(jstatement);
    } Expression() {
        statements.pop();
        jvar = new JavaVariable(actualOut);
        jvar.setName("$_in");
        jvar.setID(variableID++);
        jvar.setActual();
        type = factory.wideningConversions(jstatement.getUseVariables());
        jvar.setType(type);
        jstatement.addDefVariable(jvar);
        if (!methods.empty()) {
            jstatement.setJavaMethod((JavaMethod)methods.peek());
        }
        node.addArgument(jstatement);
    }
    ( "," {
        jstatement = new JavaStatement();
        statements.push(jstatement);
    } Expression() {
        statements.pop();
        jvar = new JavaVariable(actualOut);
        jvar.setName("$_in");
        jvar.setID(variableID++);
        jvar.setActual();
        type = factory.wideningConversions(jstatement.getUseVariables());
        jvar.setType(type);
        jstatement.addDefVariable(jvar);
        if (!methods.empty()) {
            jstatement.setJavaMethod((JavaMethod)methods.peek());
        }
        node.addArgument(jstatement);
    } )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void AllocationExpression() :
{/*@bgen(jjtree) AllocationExpression */
  ASTAllocationExpression jjtn000 = new ASTAllocationExpression(null, JJTALLOCATIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ String name;
  JavaClass jclass;
  JavaStatement jstatement;
  JavaVariable jvar;
}
{/*@bgen(jjtree) AllocationExpression */
      try {
/*@egen*/
      LOOKAHEAD(2) "new" PrimitiveType() ArrayDimsAndInits()
    | "new" name = ResponsiveName() {
          String qname = factory.getQualifiedName(name);
          jclass = (JavaClass)classes.peek();
          jclass.addUsedType(qname);
          // factory.addRelatedFiles(qname);
	  jstatement = (JavaStatement)statements.peek();
          jvar = jstatement.getUseVariables().getLast();
          jvar.setType(name);
      } ( ArrayDimsAndInits() | Arguments(qname + "." + name + "{}")
      [ ClassBody() { ignoreToken("anonymous class"); } ] )/*@bgen(jjtree)*/
      } catch (Throwable jjte000) {
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          throw (RuntimeException)jjte000;
        }
        if (jjte000 instanceof ParseException) {
          throw (ParseException)jjte000;
        }
        throw (Error)jjte000;
      } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
      }
/*@egen*/
}

void ArrayDimsAndInits() :
{/*@bgen(jjtree) ArrayDimsAndInits */
  ASTArrayDimsAndInits jjtn000 = new ASTArrayDimsAndInits(null, JJTARRAYDIMSANDINITS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArrayDimsAndInits */
      try {
/*@egen*/
      LOOKAHEAD(2)
      ( LOOKAHEAD(2) "[" Expression() "]" )+ ( LOOKAHEAD(2) "[" "]" )*
    | ( "[" "]" )+ ArrayInitializer()/*@bgen(jjtree)*/
      } catch (Throwable jjte000) {
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          throw (RuntimeException)jjte000;
        }
        if (jjte000 instanceof ParseException) {
          throw (ParseException)jjte000;
        }
        throw (Error)jjte000;
      } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
      }
/*@egen*/
}

void Statement() :
{/*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(null, JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Statement */
      try {
/*@egen*/
      LOOKAHEAD(2)
      LabeledStatement()
    | Block()
    | EmptyStatement()
    | StatementExpression() ";"
    | SwitchStatement()
    | IfStatement()
    | WhileStatement()
    | DoStatement()
    | ForStatement()
    | BreakStatement()
    | ContinueStatement()
    | ReturnStatement()
    | ThrowStatement()
    | SynchronizedStatement()
    | TryStatement()/*@bgen(jjtree)*/
      } catch (Throwable jjte000) {
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          throw (RuntimeException)jjte000;
        }
        if (jjte000 instanceof ParseException) {
          throw (ParseException)jjte000;
        }
        throw (Error)jjte000;
      } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
      }
/*@egen*/
}

void LabeledStatement() :
{/*@bgen(jjtree) LabeledStatement */
  ASTLabeledStatement jjtn000 = new ASTLabeledStatement(null, JJTLABELEDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LabeledStatement */
    try {
/*@egen*/
    <IDENTIFIER> {
        jjtn000.setName(token.image);
        ignoreToken("label");
    } ":" Statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Block() :
{/*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(null, JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Block */
    try {
/*@egen*/
    "{" ( BlockStatement() )* "}"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void BlockStatement() :
{/*@bgen(jjtree) BlockStatement */
  ASTBlockStatement jjtn000 = new ASTBlockStatement(null, JJTBLOCKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BlockStatement */
      try {
/*@egen*/
      LOOKAHEAD( [ "final" ] Type() <IDENTIFIER> )
      LocalVariableDeclaration() ";"
    | Statement()
    | UnmodifiedClassDeclaration(new JavaModifier())
    | UnmodifiedInterfaceDeclaration(new JavaModifier())/*@bgen(jjtree)*/
      } catch (Throwable jjte000) {
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          throw (RuntimeException)jjte000;
        }
        if (jjte000 instanceof ParseException) {
          throw (ParseException)jjte000;
        }
        throw (Error)jjte000;
      } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
      }
/*@egen*/
}

void LocalVariableDeclaration() :
{/*@bgen(jjtree) LocalVariableDeclaration */
  ASTLocalVariableDeclaration jjtn000 = new ASTLocalVariableDeclaration(null, JJTLOCALVARIABLEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ JavaModifier modifier = new JavaModifier();
  String type;
}
{/*@bgen(jjtree) LocalVariableDeclaration */
    try {
/*@egen*/
    [ "final" { modifier.add("final"); } ]
    type = Type() VariableDeclarator(modifier, type)
    ( "," VariableDeclarator(modifier, type) )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void EmptyStatement() :
{/*@bgen(jjtree) EmptyStatement */
  ASTEmptyStatement jjtn000 = new ASTEmptyStatement(null, JJTEMPTYSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EmptyStatement */
    try {
/*@egen*/
    ";"/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void StatementExpression() :
{/*@bgen(jjtree) StatementExpression */
  ASTStatementExpression jjtn000 = new ASTStatementExpression(null, JJTSTATEMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ String name;
  JavaStatement jstatement;
  JavaVariable jvar;
  boolean complex_op;
}
{/*@bgen(jjtree) StatementExpression */
    try {
/*@egen*/
    { jstatement = jjtn000.getJavaStatement();
      if (!methods.empty()) {
          jstatement.setJavaMethod((JavaMethod)methods.peek());
      }
      statements.push(jstatement);
    }
    ( PreIncrementExpression()
    | PreDecrementExpression()
    | name = PrimaryExpression()
      [ "++" {
            jstatement = (JavaStatement)statements.peek();
            jvar = jstatement.getUseVariables().getLast();
            jstatement.addDefVariable(jvar);
        }
      | "--" {
            jstatement = (JavaStatement)statements.peek();
            jvar = jstatement.getUseVariables().getLast();
            jstatement.addDefVariable(jvar);
        }
      | complex_op = AssignmentOperator() {
            jstatement = (JavaStatement)statements.peek();
            jstatement.addDefVariable(jstatement.getUseVariables().getLast());
            if (!complex_op && !name.endsWith("[]")) {
                jstatement.getUseVariables().removeLast();
            }
        } Expression()
      ]
    )/*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
      }
/*@egen*/ { statements.pop(); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void SwitchStatement() :
{/*@bgen(jjtree) SwitchStatement */
  ASTSwitchStatement jjtn000 = new ASTSwitchStatement(null, JJTSWITCHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ JavaStatement jstatement; }
{/*@bgen(jjtree) SwitchStatement */
    try {
/*@egen*/
    "switch" {
        jjtn000.setResponsive(token);
        jstatement = jjtn000.getJavaStatement();
        if (!methods.empty()) {
            jstatement.setJavaMethod((JavaMethod)methods.peek());
        }
        statements.push(jstatement);
    }
    "(" Expression() ")" "{"
    ( SwitchLabel(jstatement) )*
    "}"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ { statements.pop(); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void SwitchLabel(JavaStatement jst) :
{/*@bgen(jjtree) SwitchLabel */
  ASTSwitchLabel jjtn000 = new ASTSwitchLabel(null, JJTSWITCHLABEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ JavaStatement jstatement;
  String label;
}
{/*@bgen(jjtree) SwitchLabel */
    try {
/*@egen*/
    { jstatement = jjtn000.getJavaStatement();
      jstatement.addUseVariables(jst.getUseVariables());
      if (!methods.empty()) {
          jstatement.setJavaMethod((JavaMethod)methods.peek());
      }
      statements.push(jstatement);
    }
    ( "case" label = Expression() {
          jjtn000.setLabel(label);
      } ":" ( BlockStatement() )*
    | "default" {
          jjtn000.setLabel("default");
          jjtn000.setDefaultLabel(true);
      } ":" ( BlockStatement() )*
    )/*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
      }
/*@egen*/ { statements.pop(); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void IfStatement() :
{/*@bgen(jjtree) IfStatement */
  ASTIfStatement jjtn000 = new ASTIfStatement(null, JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ JavaStatement jstatement; }
{/*@bgen(jjtree) IfStatement */
    try {
/*@egen*/
    "if" {
        jjtn000.setResponsive(token);
        jstatement = jjtn000.getJavaStatement();
        if (!methods.empty()) {
            jstatement.setJavaMethod((JavaMethod)methods.peek());
        }
        statements.push(jstatement);
    }
    "(" Expression() ")" Statement()
    [ LOOKAHEAD(1) "else" Statement() ]/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { statements.pop(); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void WhileStatement() :
{/*@bgen(jjtree) WhileStatement */
  ASTWhileStatement jjtn000 = new ASTWhileStatement(null, JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ JavaStatement jstatement; }
{/*@bgen(jjtree) WhileStatement */
    try {
/*@egen*/
    "while" {
        jjtn000.setResponsive(token);
        jstatement = jjtn000.getJavaStatement();
        if (!methods.empty()) {
            jstatement.setJavaMethod((JavaMethod)methods.peek());
        }
        statements.push(jstatement);
    }
    "(" Expression() ")" Statement()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { statements.pop(); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void DoStatement() :
{/*@bgen(jjtree) DoStatement */
  ASTDoStatement jjtn000 = new ASTDoStatement(null, JJTDOSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ JavaStatement jstatement; }
{/*@bgen(jjtree) DoStatement */
    try {
/*@egen*/
    "do" {
        jjtn000.setResponsive(token);
        jstatement = jjtn000.getJavaStatement();
        if (!methods.empty()) {
            jstatement.setJavaMethod((JavaMethod)methods.peek());
        }
        statements.push(jstatement);
    }
    Statement() "while" "(" Expression() ")" ";"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { statements.pop(); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ForStatement() :
{/*@bgen(jjtree) ForStatement */
  ASTForStatement jjtn000 = new ASTForStatement(null, JJTFORSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ JavaStatement jstatement; }
{/*@bgen(jjtree) ForStatement */
    try {
/*@egen*/
    "for" {
        jjtn000.setResponsive(token);
        jstatement = jjtn000.getJavaStatement();
        if (!methods.empty()) {
            jstatement.setJavaMethod((JavaMethod)methods.peek());
        }
        statements.push(jstatement);
    }
    "(" [ ForInit() ]
    ";" [ Expression() ]
    ";" [ ForUpdate() ] ")" Statement()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { statements.pop(); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ForInit() :
{/*@bgen(jjtree) ForInit */
  ASTForInit jjtn000 = new ASTForInit(null, JJTFORINIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ForInit */
      try {
/*@egen*/
      LOOKAHEAD( [ "final" ] Type() <IDENTIFIER> )
      LocalVariableDeclaration()
    | StatementExpressionList()/*@bgen(jjtree)*/
      } catch (Throwable jjte000) {
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          throw (RuntimeException)jjte000;
        }
        if (jjte000 instanceof ParseException) {
          throw (ParseException)jjte000;
        }
        throw (Error)jjte000;
      } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
      }
/*@egen*/
}

void StatementExpressionList() :
{/*@bgen(jjtree) StatementExpressionList */
  ASTStatementExpressionList jjtn000 = new ASTStatementExpressionList(null, JJTSTATEMENTEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) StatementExpressionList */
    try {
/*@egen*/
    StatementExpression() ( "," StatementExpression() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ForUpdate() :
{/*@bgen(jjtree) ForUpdate */
  ASTForUpdate jjtn000 = new ASTForUpdate(null, JJTFORUPDATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ForUpdate */
    try {
/*@egen*/
    StatementExpressionList()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void BreakStatement() :
{/*@bgen(jjtree) BreakStatement */
  ASTBreakStatement jjtn000 = new ASTBreakStatement(null, JJTBREAKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ JavaStatement jstatement; }
{/*@bgen(jjtree) BreakStatement */
    try {
/*@egen*/
    "break" {
        jjtn000.setResponsive(token);
        jstatement = jjtn000.getJavaStatement();
        if (!methods.empty()) {
            jstatement.setJavaMethod((JavaMethod)methods.peek());
        }
        statements.push(jstatement);
    }
    [ <IDENTIFIER> {
        jjtn000.setName(token.image);
    } ] ";"/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ { statements.pop(); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ContinueStatement() :
{/*@bgen(jjtree) ContinueStatement */
  ASTContinueStatement jjtn000 = new ASTContinueStatement(null, JJTCONTINUESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ JavaStatement jstatement; }
{/*@bgen(jjtree) ContinueStatement */
    try {
/*@egen*/
    "continue" {
        jjtn000.setResponsive(token);
        jstatement = jjtn000.getJavaStatement();
        if (!methods.empty()) {
            jstatement.setJavaMethod((JavaMethod)methods.peek());
        }
        statements.push(jstatement);
    }
    [ <IDENTIFIER> {
        jjtn000.setName(token.image);
    } ] ";"/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ { statements.pop(); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ReturnStatement() :
{/*@bgen(jjtree) ReturnStatement */
  ASTReturnStatement jjtn000 = new ASTReturnStatement(null, JJTRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ JavaStatement jstatement;
  JavaVariable jvar;
}
{/*@bgen(jjtree) ReturnStatement */
    try {
/*@egen*/
    "return" {
        jjtn000.setResponsive(token);
        jstatement = jjtn000.getJavaStatement();
        if (!methods.empty()) {
            jstatement.setJavaMethod((JavaMethod)methods.peek());
        }
        statements.push(jstatement);
    }
    [ Expression() ] ";"/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/ {
        JavaMethod jmethod = (JavaMethod)methods.peek();
        JavaVariable jv = getVariableDeclaration("$" + jmethod.getName());
	if (jv != null) {
	    jvar = new JavaVariable(jv.getName(), jv.getID());
            jvar.setModifier(jmethod.getModifier());
            jvar.setType(jmethod.getType());
            jvar.setJavaClass((JavaClass)classes.peek());
            jvar.setJavaMethod(jmethod);
            jvar.setSort(jv.getSort());
            jstatement = (JavaStatement)statements.peek();
            jstatement.addDefVariable(jvar);
        }
        statements.pop();
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ThrowStatement() :
{/*@bgen(jjtree) ThrowStatement */
  ASTThrowStatement jjtn000 = new ASTThrowStatement(null, JJTTHROWSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ JavaStatement jstatement; }
{/*@bgen(jjtree) ThrowStatement */
    try {
/*@egen*/
    "throw" {
        jjtn000.setResponsive(token);
        jstatement = jjtn000.getJavaStatement();
        if (!methods.empty()) {
            jstatement.setJavaMethod((JavaMethod)methods.peek());
        }
        statements.push(jstatement);
    }
    Expression() ";"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { statements.pop(); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void SynchronizedStatement() :
{/*@bgen(jjtree) SynchronizedStatement */
  ASTSynchronizedStatement jjtn000 = new ASTSynchronizedStatement(null, JJTSYNCHRONIZEDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ JavaStatement jstatement; }
{/*@bgen(jjtree) SynchronizedStatement */
    try {
/*@egen*/
    "synchronized" {
        jjtn000.setResponsive(token);
        ignoreToken("synchronized");
        jstatement = jjtn000.getJavaStatement();
        if (!methods.empty()) {
            jstatement.setJavaMethod((JavaMethod)methods.peek());
        }
        statements.push(jstatement);
    }
    "(" Expression() ")" Block()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { statements.pop(); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void TryStatement() :
{/*@bgen(jjtree) TryStatement */
  ASTTryStatement jjtn000 = new ASTTryStatement(null, JJTTRYSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ JavaStatement jstatement; }
{/*@bgen(jjtree) TryStatement */
    try {
/*@egen*/
    "try" {
        jjtn000.setResponsive(token);
        ignoreToken("try");
        jstatement = jjtn000.getJavaStatement();
        if (!methods.empty()) {
            jstatement.setJavaMethod((JavaMethod)methods.peek());
        }
        statements.push(jstatement);
    }
    Block()
    ( "catch" "(" FormalParameter() ")" Block() )*
    [ "finally" Block() ]/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { statements.pop(); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
